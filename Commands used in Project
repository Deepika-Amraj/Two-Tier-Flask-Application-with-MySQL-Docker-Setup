# 1. Update system package list
sudo apt-get update

# 2. Install Docker engine
sudo apt-get install docker.io

# 3. Check installed Docker version
docker --version

# 4. List files in the current directory
ls

# 5. List running Docker containers
docker ps

# 6. Change ownership of Docker to the 'ubuntu' user
sudo chown ubuntu docker

# 7. Check Docker service status
systemctl status docker

# 8. View group details from group configuration files
cat /etc/groups
cat /etc/group

# 9. Add user to the 'docker' group and refresh group membership
sudo usermod -aG docker ubuntu && newgrp docker

# 10. Navigate into directories
cd <directory-name>

# 11. Open a file for editing
vim <file-name>

# 12. Build a Docker image with a custom tag
docker build -t <image-name> .

# 13. Stop and remove a running container
docker kill <container-id> && docker rm <container-id>

# 14. Run a container with port mapping and detached mode
docker run -d -p <host-port>:<container-port> <image-name>:<tag>

# 15. Display Docker images available locally
docker images

# 16. Remove unused Docker objects (images, containers, etc.)
docker system prune -y

# 17. Remove specific Docker images by ID
docker rmi <image-id1> <image-id2> ...

# 18. Run MySQL container with environment variables and volume mapping
docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=root -v mysql-data:/var/lib/mysql -p 3306:3306 mysql:5.7

# 19. Access a running container's bash shell
docker exec -it <container-id> bash

# 20. Create and inspect Docker volumes
docker volume create <volume-name>
docker inspect <volume-name>

# 21. Create a bridge network and list networks
docker network create -d bridge <network-name>
docker network ls

# 22. Clone a GitHub repository
git clone <repository-url>

# 23. Build a Flask app Docker image
docker build -t flaskapp:latest .

# 24. Run a Flask app with environment variables, port mapping, and networking
docker run -d -e MYSQL_HOST=mysql -e MYSQL_USER=root -e MYSQL_PASSWORD=admin -e MYSQL_DB=mydb -p 5000:5000 --network=<network-name> flaskapp:latest

# 25. View logs for a specific container
docker logs <container-id>

# 26. Stop and remove multiple containers
docker stop <container-id1> <container-id2> && docker rm <container-id1> <container-id2>
